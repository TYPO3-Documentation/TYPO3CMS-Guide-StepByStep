#!/usr/bin/env php
<?php
define('SEARCH_PATH', realpath(__DIR__ . '/../Documentation'));

const MARKDOWN_LINK_PATTERN = '/(?:(?!\!).)\[([^\]]+)\]\(([^ ]+)( "([^"]+)")?\)/';

// Find all Markdown files
$files = array_keys(iterator_to_array(new RegexIterator(
	new RecursiveIteratorIterator(
		new RecursiveDirectoryIterator(SEARCH_PATH)
	),
    '/^.+\.md$/',
    RecursiveRegexIterator::GET_MATCH
)));

$allFiles = [];
$allLinks = [];

foreach ($files as $fullFilePath) {
    $file = str_replace(SEARCH_PATH, '', $fullFilePath);

    $allFiles[$file] = [
        'title' => null,
        'path' => $file,
        'incomingLinks' => [],
        'outgoingLinks' => [],
    ];
}

foreach (array_values($allFiles) as $file) {
    $content = file_get_contents(SEARCH_PATH . $file['path']);

    preg_match('/^#\s+(.+)$/m', $content, $titleMatches);

    $allFiles[$file['path']]['title'] = $titleMatches[1] ?? basename($file['path']);

    preg_match_all(MARKDOWN_LINK_PATTERN, $content, $linkMatches, PREG_SET_ORDER | PREG_UNMATCHED_AS_NULL);

    foreach ($linkMatches as $linkMatch) {
        if ($linkMatch === []) {
            continue;
        }

        [$fullMatch, $linkText, $linkUri, $linkTitle] = $linkMatch;

        // If the URI is an anchor, we don't want it
        if ($linkUri[0] === '#') {
            continue;
        }

        $isExternalUrl = (bool)preg_match('/^[a-zA-Z]+:/', $linkUri);

        $linkEntry = [
            'inFile' => $file['path'],
            'toFile' => null,
            'match' => trim($fullMatch),
            'linkText' => $linkText,
            'unexpandedUri' => $linkUri,
            'uri' => $linkUri,
            'titleAttribute' => $linkTitle,
            'external' => $isExternalUrl,
        ];

        if (!$isExternalUrl) {
            // If this is not an absolute link, we add the path to the file containing the link and expand it.
            if (!str_starts_with($linkEntry['uri'], '/')) {
                $linkEntry['uri'] = expandPath(dirname($file['path']) . '/' . $linkEntry['uri']);
            }

            if (!str_contains($linkUri, '/')) {
                // If it's a shortlink (just file name) we try to find the file it's linking to.
                $matchingFiles = array_values(array_filter(
                    array_keys($allFiles),
                    function ($entry) use ($linkUri) {
                        return str_ends_with(strtolower($entry), '/' . strtolower($linkUri));
                    }
                ));

                if (count($matchingFiles) === 1) {
                    $linkEntry['toFile'] = $matchingFiles[0];
                    $linkEntry['uri'] = $matchingFiles[0];
                }
            }
        }

        $allLinks[] = $linkEntry;
    }
}

file_put_contents(
    SEARCH_PATH . '/files.json',
    json_encode([
        'files' => $allFiles,
        'links' => $allLinks,
    ])
);

function expandPath(string $path): string {
    $newLinkUrlParts = [];

    foreach (array_filter(explode('/', $path)) as $linkUrlPart) {
        if ($linkUrlPart === '..') {
            array_pop($newLinkUrlParts);
            continue;
        }

        $newLinkUrlParts[] = $linkUrlPart;
    }

    return '/' . implode('/', $newLinkUrlParts);
}